@model Presentation.Models.TransactionsModel

@{
    ViewBag.Title = "All Transactions";
    Layout = "_Layout";
    string SuccesMessage = ViewBag.SuccesMessage;
    string ErrorMessage = ViewBag.ErrorMessage;
}

<main class="overflow-visible">
    <div class="flex flex-row justify-between items-center mb-8">
        <h1 class="text-3xl font-bold">Transactions</h1>
        <a asp-controller="Transactions" asp-action="Add"
           class="bg-blue-600 hover:bg-blue-700 py-2 px-4 rounded-xl text-white inline-block">Add</a>
    </div>

    @if (SuccesMessage != null)
    {
        <span>@SuccesMessage</span>
    }
    @if (ErrorMessage != null)
    {
        <span>@ErrorMessage</span>
    }

    <table class="min-w-full leading-normal text-left table-auto border-collapse rounded-lg overflow-visible">
        <tbody>
        @foreach (var transaction in Model.Transactions)
        {
            var cat = Model.Categories.FirstOrDefault(c => c.Id == transaction.CategoryId);
            <a asp-action="Edit" asp-controller="Transactions">
                <tr class="bg-white/10 hover:bg-gray-200 border-b border-t border-gray-500/25">
                    <td class="py-3 px-4">â‚¬@transaction.Amount</td>
                    <td class="py-3 px-4">@transaction.Date</td>
                    @if (cat != null)
                    {
                        <td class="py-3 px-4">@cat.Name</td>
                    }
                    else
                    {
                        <td class="py-3 px-4">No category</td>
                    }
                    <td class="py-3 px-4 flex flex-row gap-2">
                        <div
                            class="flex flex-row justify-center items-center gap-2 bg-blue-500/15 w-fit px-2 rounded-full py-1/2">
                            <div class="w-[8px] h-[8px] rounded-full bg-blue-500"></div>
                            <span class="text-blue-500">Groceries</span>
                        </div>
                        <div
                            class="flex flex-row justify-center items-center gap-2 bg-red-500/15 w-fit px-2 rounded-full py-1/2">
                            <div class="w-[8px] h-[8px] rounded-full bg-red-500"></div>
                            <span class="text-red-500">Fun</span>
                        </div>
                    </td>
                    <td>
                        <div class="relative inline-block text-left js-dropdown-container overflow-visible">
                            <button
                                class="js-dropdown-button border-1 border-gray-500/25 py-2 pl-3 pr-4 rounded-xl text-gray-500 font-semibold flex items-center">
                                <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 pointer-events-none"
                                     viewBox="0 0 20 20" fill="currentColor">
                                    <path fill-rule="evenodd"
                                          d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                                          clip-rule="evenodd"/>
                                </svg>
                                Actions
                            </button>

                            <div
                                class="js-dropdown-menu z-40 absolute hidden mt-2 w-40 rounded-xl shadow-lg bg-white ring-1 ring-black ring-opacity-5 focus:outline-none"
                                role="menu" aria-orientation="vertical" aria-labelledby="menu-button" tabindex="-1">
                                <div class="py-1" role="none">
                                    <a asp-action="Details" asp-controller="Transactions" asp-route-id="@transaction.Id"
                                       role="menuitem" tabindex="-1"
                                       class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Details</a>
                                    <a asp-action="Edit" asp-controller="Transactions" asp-route-id="@transaction.Id"
                                       role="menuitem" tabindex="-1"
                                       class="block px-4 py-2 text-sm text-gray-700 hover:bg-gray-100">Edit</a>
                                    <a asp-action="Remove" asp-controller="Transactions" asp-route-id="@transaction.Id"
                                       role="menuitem" tabindex="-1"
                                       class="block px-4 py-2 text-sm text-red-500 hover:text-red-600 hover:bg-gray-100">Remove</a>
                                </div>
                            </div>
                        </div>

                    </td>
                </tr>
            </a>
        }
        </tbody>
    </table>

</main>

<script>
    // Selecteer ALLE knoppen met de class 'js-dropdown-button'
    const dropdownButtons = document.querySelectorAll('.js-dropdown-button');

    // Functie om alle openstaande dropdowns te sluiten
    function closeAllDropdowns(exceptButton = null) {
        document.querySelectorAll('.js-dropdown-menu').forEach(menu => {
            // Sluit het menu tenzij het hoort bij de knop die net geklikt is (optioneel)
            const parentButton = menu.previousElementSibling; // Aanname: knop is directe voorganger
            // Alternatief: const parentContainer = menu.closest('.js-dropdown-container');
            // const parentButton = parentContainer?.querySelector('.js-dropdown-button');

            if (parentButton !== exceptButton) {
                menu.classList.add('hidden');
            }
        });
    }

    // Voeg een listener toe aan ELKE knop
    dropdownButtons.forEach(button => {
        button.addEventListener('click', (event) => {
            event.stopPropagation(); // Voorkom dat de klik direct de document listener triggert

            // Zoek het menu dat bij DEZE knop hoort
            // Aanname: menu is het directe volgende element na de knop
            const menu = button.nextElementSibling;
            // Robuuster: const parent = button.closest('.js-dropdown-container'); const menu = parent.querySelector('.js-dropdown-menu');

            if (menu) {
                const isHidden = menu.classList.contains('hidden');

                // Sluit eerst alle *andere* dropdowns
                closeAllDropdowns(button);

                // Toggle dan de huidige dropdown
                menu.classList.toggle('hidden', !isHidden);
            }
        });
    });

    // Listener om te sluiten bij klikken buiten de dropdown
    document.addEventListener('click', (event) => {
        // Controleer of de klik buiten een actieve dropdown component viel
        const clickedInside = event.target.closest('.js-dropdown-container');
        if (!clickedInside) {
            closeAllDropdowns();
        }
        // Verbetering: Als op SVG geklikt wordt, behandel als klik op knop
        if (event.target.closest('svg') && event.target.closest('.js-dropdown-button')) {
            // De button listener handelt dit al af door event bubbling
            // Maar we moeten voorkomen dat de document listener direct sluit.
            // De stopPropagation in de button listener doet dit.
        }
    });
</script>
